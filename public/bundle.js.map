{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","app.js","collections/malwares.js","collections/types.js","models/malware.js","models/type.js","utils/modal.js","utils/request.js","views/header/header.js","views/malware/malware.js","views/nav/nav.js","views/types/types.js","views/upload/upload.js"],"names":[],"mappingsjJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxvfile":"bundle.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * /public/app.js\n *\n * @description: Main frontend script\n * @author: Chris Young (young.c.5690@gmail.com)\n * @created: Septemeber 17th 2015\n */\n\n(function () {\n\n  'use strict';\n\n  var Header = require('./views/header/header.js'),\n      Nav = require('./views/nav/nav.js'),\n      Malware = require('./views/malware/malware.js'),\n      Upload = require('./views/upload/upload.js'),\n      Types = require('./views/types/types.js');\n\n  var App = Backbone.Router.extend({\n\n    /**\n     * App.initialize()\n     * @description: Sets up the application\n     */\n    initialize: function () {\n      var that = this;\n\n      this.views = {};\n      this.ui = {\n        $body: $('body'),\n        $header: $('#header'),\n        $nav: $('#nav'),\n        $content: $('#content'),\n        $contentWrapper: $('#content-wrapper'),\n        $errorTemplate: $('#error-template'),\n        $loadingTemplate: $('#loading-template')\n      };\n\n      this.errorTemplate = _.template(this.ui.$errorTemplate.html());\n\n      Backbone.history.start();\n\n      async.series([function (callback) {\n        that.header = new Header({\n          parent: that,\n          el: that.ui.$header,\n          callback: callback\n        });\n      }, function (callback) {\n        that.nav = new Nav({\n          parent: that,\n          el: that.ui.$nav,\n          callback: callback,\n          router: that\n        });\n      }], function (error) {\n        if (error) {\n          that.ui.$content.html(this.errorTemplate());\n        }\n\n        that.ui.$contentWrapper.removeClass('hidden');\n        that.ui.$contentWrapper.height(that.ui.$contentWrapper.height() - that.ui.$header.height());\n        \n        $(window).resize(_.bind(that.resize, that));\n      });\n    },\n\n    /**\n     * App.resize()\n     * @description: Vertically resizes content on window resize\n     */\n    resize: function () {\n      this.ui.$contentWrapper.height(this.ui.$body.height() - this.ui.$header.height());\n    },\n\n    /**\n     * App.routes\n     * @description: Declares app view routing\n     */\n    routes: {\n      '': 'redirectToUpload',\n      'malware': 'malware',\n      'upload': 'upload',\n      'types': 'types'\n    },\n\n    /**\n     * App.redirectToUpload()\n     * @description: Redirect to the upload view when no page is specified\n     */\n    redirectToUpload: function () {\n      window.location.replace('#/upload');\n    },\n\n    /**\n     * App.malware()\n     * @description: Creates the malware view or renders it if it already exists\n     */\n    malware: function () {\n      if (!this.views.malware) {\n        this.views.malware = new Malware({\n          parent: this,\n          el: this.ui.$content\n        });\n      } else {\n        this.views.malware.render();\n      }\n    },\n\n    /**\n     * App.upload()\n     * @description: Creates the upload view or renders it if it already exists\n     */\n    upload: function () {\n      if (!this.views.upload) {\n        this.views.upload = new Upload({\n          parent: this,\n          el: this.ui.$content\n        });\n      } else {\n        this.views.upload.render();\n      }\n    },\n\n    /**\n     * App.types()\n     * @description: Creates the types view or renders it if it already exists\n     */\n    types: function () {\n      if (!this.views.types) {\n        this.views.types = new Types({\n          parent: this,\n          el: this.ui.$content\n        });\n      } else {\n        this.views.types.render();\n      }\n    }\n\n  });\n\n  var app = new App();\n\n})();\n\n","/**\n * /public/collections/malwares.js\n *\n * @descrpition: Malwares collection\n * @author: Chris Young (young.c.5690@gmail.com)\n * @created: September 17th 2015\n */\n\nvar Malware = require('../models/malware.js');\n\nmodule.exports = Backbone.Collection.extend({\n\n  model: Malware,\n\n  url: 'malwares',\n\n  /**\n   * sortMethod\n   * @description: Used by Malwares.comparator() to define how the collection should be sorted\n   */\n  sortMethod: {\n    key: 'md5',\n    direction: -1\n  },\n\n  /**\n   * Malwares.comparator()\n   * @description: Used to maintain the collection in a sorted order\n   * @param: {Malware} a\n   * @param: {Malware} b\n   * @returns: {Number}\n   */\n  comparator: function (a, b) {\n    var aAttribute = a.get(this.sortMethod.key),\n        bAttribute = b.get(this.sortMethod.key);\n\n    if (aAttribute > bAttribute) {\n      return -1 * this.sortMethod.direction;\n    }\n\n    if (aAttribute < bAttribute) {\n      return 1 * this.sortMethod.direction\n    }\n\n    return 0;\n  }\n\n});\n\n","/**\n * /public/collections/types.js\n *\n * @descrpition: Types collection\n * @author: Chris Young (young.c.5690@gmail.com)\n * @created: September 17th 2015\n */\n\nvar Type = require('../models/type.js');\n\nmodule.exports = Backbone.Collection.extend({\n\n  model: Type,\n\n  url: 'types',\n\n  /**\n   * sortMethod\n   * @description: Used by Malwares.comparator() to define how the collection should be sorted\n   */\n  sortMethod: {\n    key: 'classificationType',\n    direction: -1\n  },\n\n  /**\n   * Types.comparator()\n   * @description: Used to maintain the collection in a sorted order\n   * @param: {Malware} a\n   * @param: {Malware} b\n   * @returns: {Number}\n   */\n  comparator: function (a, b) {\n    var aAttribute = a.get(this.sortMethod.key),\n        bAttribute = b.get(this.sortMethod.key);\n\n    if (aAttribute > bAttribute) {\n      return -1 * this.sortMethod.direction;\n    }\n\n    if (aAttribute < bAttribute) {\n      return 1 * this.sortMethod.direction\n    }\n\n    return 0;\n  }\n\n});\n\n","/**\n * /public/models/malware.js\n *\n * @description: Malware model\n * @author: Chris Young (young.c.5690@gmail.com)\n * @created: Septmeber 17th 2015\n */\n\nmodule.exports = Backbone.Model.extend({\n\n  defaults: {\n    md5: '',\n    classificationName: '',\n    classificationType: '',\n    fileSize: '',\n    fileType: ''\n  }\n\n});\n\n","/**\n * /public/models/type.js\n *\n * @description: Type model\n * @author: Chris Young (young.c.5690@gmail.com)\n * @created: Septmeber 17th 2015\n */\n\nmodule.exports = Backbone.Model.extend({\n\n  defaults: {\n    classificationType: '',\n    amount: 0\n  }\n\n});\n\n","/**\n * modal.js\n *\n * @description: Bootstrap modal wrapper class\n * @author: Chris Young (young.c.5690@gmail.com)\n * @created: July 14th 2015\n */\n\nfunction Modal(options) {\n  _.extend(this, options);\n\n  this.$el = $('#modal');\n  this.$title = $('#modal-title');\n  this.$message = $('#modal-message');\n  this.$buttons = $('#modal-buttons');\n\n  this.render();\n}\n\n/**\n * Modal.render()\n * @description: Shows the modal\n */\nModal.prototype.render = function () {\n  var that = this;\n\n  this.$title.text(this.title);\n  this.$message.text(this.message);\n\n  if (this.buttons) {\n    this.$buttons.html('');\n\n    _.each(this.buttons, function (button) {\n      var $element = $('<button type=\"button\">' + button.text + '</button>');\n      $element.click(button.callback);\n      that.$buttons.append($element);\n    });\n  } else {\n    var $button = $('<button type=\"button\" data-dismiss=\"modal\">Ok</button>');\n    $button.click(this.callback);\n    this.$buttons.append($button);\n  }\n\n  this.$el.modal('show');\n};\n\n/**\n * Modal.close()\n * @description: Hides the modal\n */\nModal.prototype.close = function () {\n  this.$el.modal('hide');\n};\n\nmodule.exports = Modal;\n\n","/**\n * public/utils/request.js\n *\n * @description: Fetch wrapper class with automatic error handling\n * @author: Chris Young (young.c.5690@gmail.com)\n * @created: July 14th 2015\n */\n\n/**\n * Request()\n * @description: Creates a new Request object and makes an ajax request\n * @param: {Object} options\n */\nfunction Request(options) {\n  _.extend(this, options);\n\n  this.fetch();\n}\n\n/**\n * Request.fetch()\n * @description: Makes an ajax request using fetch\n */\nRequest.prototype.fetch = function () {\n  var that = this;\n\n  /**\n   * checkStatus()\n   * @description: Breaks the promise chain if response is non-200\n   * @param: {Object} response\n   */\n  function checkStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    }\n\n    throw {\n      statusText: response.statusText,\n      response: response\n    };\n  }\n\n  fetch(this.url, {\n    method: this.method || 'get',\n    headers: this.headers,\n    body: this.body\n  }).then(checkStatus)\n    .then(function (response) {\n      if (response.status === 204) {\n        return;\n      }\n\n      if (response.headers.get('Content-Type') === 'application/json') {\n        return response.json();\n      }\n        \n      return response.text();\n    }).then(function (body) {\n      return that.callback(null, body);\n    }).catch(function (error) {\n      if (error.response && error.response.status === 204) {\n        return that.callback();\n      }\n\n      return that.callback(error);\n    });\n};\n\nmodule.exports = Request;\n","/**\n * /public/views/header/header.js\n *\n * @description: Header view\n * @author: Chris Young (young.c.5690@gmail.com)\n * @created: September 17th 2015\n */\n\nvar Request = require('../../utils/request.js');\n\nmodule.exports = Backbone.View.extend({\n\n  /**\n   * Header.initialize()\n   * @description: Loads view template\n   * @param: {Object} options\n   */\n  initialize: function (options) {\n    var that = this;\n\n    _.extend(this, options);\n\n    new Request({\n      url: 'views/header/header.tmpl',\n      callback: function (error, body) {\n        if (error) {\n          return that.callback(error);\n        }\n\n        that.template = _.template(body);\n        that.render();\n        that.$el.removeClass('hidden');\n\n        return that.callback();\n      }\n    });\n  },\n\n  /**\n   * Header.setUiElements()\n   * @description: Gets DOM references for view elements\n   */\n  setUiElements: function () {\n    this.ui = {\n      $contentWrapper: $('#content-wrapper')\n    };\n  },\n\n  /**\n   * Header.render()\n   * @description: Draws the view\n   */\n  render: function () {\n    this.$el.html(this.template());\n    this.setUiElements();\n    this.ui.$contentWrapper.css('height', 'calc(100% - ' + this.$el.height() + 'px)');\n  }\n\n});\n\n","/**\n * /public/views/malware/malware.js\n *\n * @description: Malware view\n * @author: Chris Young (young.c.5690@gmail.com)\n * @created: September 17th 2015\n */\n\nvar Request = require('../../utils/request.js');\n\nvar Malwares = require('../../collections/malwares.js');\n\nmodule.exports = Backbone.View.extend({\n\n  /**\n   * Malware.initialize()\n   * @description: Loads view template\n   * @param: {Object} options\n   */\n  initialize: function (options) {\n    var that = this;\n\n    _.extend(this, options);\n\n    this.malwares = new Malwares();\n\n    this.errorTemplate = _.template(this.parent.ui.$errorTemplate.html());\n    this.loadingTemplate = _.template(this.parent.ui.$loadingTemplate.html());\n\n    new Request({\n      url: 'views/malware/malware.tmpl',\n      callback: function (error, body) {\n        if (!error) {\n          that.template = _.template(body);\n        }\n\n        that.render();\n      }\n    });\n  },\n\n  /**\n   * Malware.setUiElements()\n   * @description: Gets DOM references for view elements\n   */\n  setUiElements: function () {\n    this.ui = {\n      $malwarePageLoading: $('#malware-page-loading'),\n      $tableWrapper: $('#malware-content div.table-wrapper'),\n      $contentBox: $('#content div.box'),\n      $sortLinks: $('#malware-content a.sort-link')\n    };\n  },\n\n  /**\n   * Malware.render()\n   * @description: Draws the view\n   */\n  render: function () {\n    var that = this;\n\n    if (!this.template) {\n      return this.$el.html(this.errorTemplate());\n    }\n\n    if (!this.malwares.length) {\n      this.$el.html(this.loadingTemplate());\n    } else {\n      this.ui.$malwarePageLoading.removeClass('hidden');\n    }\n\n    this.malwares.on('error sync', function (event) {\n      if (event.type === 'error') {\n        return that.$el.html(that.errorTemplate());\n      }\n\n      that.$el.html(that.template({ malwares: that.malwares }));\n      that.setUiElements();\n\n      that.resize()\n      $(window).resize(_.bind(that.resize, that));\n    });\n\n    this.malwares.fetch();\n  },\n\n  /**\n   * events\n   * @description: Declares view click events\n   */\n  events: {\n    'click #malware-content a.sort-link': 'sort'\n  },\n\n  /**\n   * Malware.resize()\n   * @description: Resizes the table wrapper on window resize\n   */\n  resize: function () {\n    this.ui.$tableWrapper.css('max-height', this.ui.$contentBox.height());\n  },\n\n  /**\n   * Malware.sort()\n   * @description: Reorders the collection based on sort method\n   */\n  sort: function (event) {\n    var $target = $(event.target).parents('a.sort-link');\n\n    event.preventDefault();\n\n    this.malwares.sortMethod.key = $target.data('key');\n    this.malwares.sortMethod.direction = $target.find('span.sort-icon').hasClass('fa-sort-down') ? 1 : -1;\n    this.malwares.sort();\n\n    this.render();\n  }\n\n});\n\n","/**\n * /public/views/nav.js\n *\n * @description: Navigation view\n * @author: Chris Young (cyoung@mobiquityinc.com)\n * @created: September 17th 2015\n */\n\nvar Request = require('../../utils/request.js');\n\nmodule.exports = Backbone.View.extend({\n\n  /**\n   * Nav.initialize()\n   * @description: Loads view template\n   * @param: {Object} options\n   */\n  initialize: function (options) {\n    var that = this;\n\n    _.extend(this, options);\n\n    new Request({\n      url: 'views/nav/nav.tmpl',\n      callback: function (error, body) {\n        if (error) {\n          return options.callback(error);\n        }\n\n        that.template = _.template(body);\n        that.render();\n        that.$el.removeClass('hidden');\n        that.listenTo(that.router, 'route', that.setActive);\n\n        return options.callback();\n      }\n    });\n  },\n\n  /**\n   * Nav.setUiElements()\n   * @description: Gets DOM references for view elements\n   */\n  setUiElements: function () {\n    this.ui = {\n      $tooltips: $('#nav [data-toggle=\"tooltip\"]'),\n      $lis: $('#nav li')\n    };\n  },\n\n  /**\n   * Nav.render()\n   * @description: Draws the view\n   */\n  render: function () {\n    this.$el.html(this.template());\n\n    this.setUiElements();\n\n    this.toggle();\n    this.setActive();\n  },\n\n  /**\n   * Nav.events\n   * @description: Declares click events\n   */\n  events: {\n    'click #nav-toggle': 'toggle'\n  },\n\n  /**\n   * Nav.toggle()\n   * @description: Collpases and expands the navigation view to increase main content width\n   * @param: {Object} event\n   */\n  toggle: function (event) {\n    if (event) {\n      event.preventDefault();\n      this.collapsed = !this.collapsed; \n    }\n\n    if (this.collapsed) {\n      this.$el.removeClass('nav-expanded').addClass('nav-collapsed');\n      this.ui.$tooltips.tooltip();\n    } else {\n      this.ui.$tooltips.tooltip('destroy');\n      this.$el.removeClass('nav-collapsed').addClass('nav-expanded');\n    }\n  },\n\n  /**\n   * Nav.setActive()\n   * @description: Highlights the current navigation item\n   */\n  setActive: function () {\n    var $a = $('#nav a[href=\"' + window.location.hash + '\"]');\n\n    this.ui.$lis.removeClass('active');\n\n    if ($a.hasClass('nav-sub-level')) {\n      $a.parents('li').addClass('active');\n    }\n\n    $a.parent().addClass('active');\n  }\n\n});\n\n","/**\n * /public/views/types/types.js\n *\n * @description: Database view\n * @author: Chris Young (young.c.5690@gmail.com)\n * @created: September 17th 2015\n */\n\nvar Request = require('../../utils/request.js');\n\nvar Types = require('../../collections/types.js');\n\nmodule.exports = Backbone.View.extend({\n\n  /**\n   * Types.initialize()\n   * @description: Loads view template\n   * @param: {Object} options\n   */\n  initialize: function (options) {\n    var that = this;\n\n    _.extend(this, options);\n\n    this.types = new Types();\n\n    this.errorTemplate = _.template(this.parent.ui.$errorTemplate.html());\n    this.loadingTemplate = _.template(this.parent.ui.$loadingTemplate.html());\n\n    new Request({\n      url: 'views/types/types.tmpl',\n      callback: function (error, body) {\n        if (!error) {\n          that.template = _.template(body);\n        }\n\n        that.render();\n      }\n    });\n  },\n\n  /**\n   * Types.setUiElements()\n   * @description: Gets DOM references for view elements\n   */\n  setUiElements: function () {\n    this.ui = {\n      $pageLoading: $('#type-page-loading'),\n      $tableWrapper: $('#type-content div.table-wrapper'),\n      $contentBox: $('#content div.box')\n    };\n  },\n\n  /**\n   * Types.render()\n   * @description: Draws the view\n   */\n  render: function () {\n    var that = this;\n\n    if (!this.template) {\n      return this.$el.html(this.errorTemplate());\n    }\n\n    if (!this.types.length) {\n      this.$el.html(this.loadingTemplate());\n    } else {\n      this.ui.$pageLoading.removeClass('hidden');\n    }\n\n    this.types.on('error sync', function (error) {\n      if (event.type === 'error') {\n        return that.$el.html(that.errorTemplate());\n      }\n\n      that.$el.html(that.template({ types: that.types }));\n      that.setUiElements();\n\n      that.resize()\n      $(window).resize(_.bind(that.resize, that));\n    });\n\n    this.types.fetch();\n  },\n\n  /**\n   * events\n   * @description: Declares view click events\n   */\n  events: {\n    'click #types-content a.sort-link': 'sort'\n  },\n\n  /**\n   * Types.resize()\n   * @description: Resizes the table wrapper on window resize\n   */\n  resize: function () {\n    this.ui.$tableWrapper.css('max-height', this.ui.$contentBox.height());\n  },\n\n  /**\n   * Database.sort()\n   * @description: Reorders the collection based on sort method\n   */\n  sort: function (event) {\n    var $target = $(event.target).parents('a.sort-link');\n\n    event.preventDefault();\n\n    this.types.sortMethod.key = $target.data('key');\n    this.types.sortMethod.direction = $target.find('span.sort-icon').hasClass('fa-sort-down') ? 1 : -1;\n    this.types.sort();\n\n    this.render();\n  }\n\n});\n\n","/**\n * /public/views/upload/upload.js\n *\n * @description: Upload view\n * @author: Chris Young (young.c.5690@gmail.com)\n * @created: September 17th 2015\n */\n\nvar Request = require('../../utils/request.js'),\n    Modal = require('../../utils/modal.js');\n\nvar Malwares = require('../../collections/malwares.js');\n\nmodule.exports = Backbone.View.extend({\n\n  /**\n   * Upload.initialize()\n   * @description: Loads view template\n   * @param: {Object} options\n   */\n  initialize: function (options) {\n    var that = this;\n\n    _.extend(this, options);\n\n    this.malwares = new Malwares();\n\n    this.errorTemplate = _.template(this.parent.ui.$errorTemplate.html());\n\n    new Request({\n      url: 'views/upload/upload.tmpl',\n      callback: function (error, body) {\n        if (!error) {\n          that.template = _.template(body);\n        }\n\n        that.render();\n      }\n    });\n  },\n\n  /**\n   * Upload.setUiElements()\n   * @description: Gets DOM references for view elements\n   */\n  setUiElements: function () {\n    this.ui = {\n      $uploadInput: $('#upload-input')\n    };\n  },\n\n  /**\n   * Upload.render()\n   * @description: Draws the view\n   */\n  render: function () {\n    if (!this.template) {\n      return this.$el.html(this.errorTemplate());\n    }\n\n    this.$el.html(this.template());\n    this.setUiElements();\n  },\n\n  /**\n   * Upload.events\n   * @description: Declares view click events\n   */\n  events: {\n    'click #select-file': 'selectFile'\n  },\n\n  /**\n   * Upload.selectFile()\n   * @description: Clicks hidden ugly input and sets change event\n   */\n  selectFile: function () {\n    this.ui.$uploadInput.click().on('change', _.bind(this.changeFile, this));\n  },\n\n  /**\n   * Upload.changeFile()\n   * @description: Starts the upload if a file was selected\n   */\n  changeFile: function () {\n    var filePath = this.ui.$uploadInput.val();\n\n    if (!filePath) {\n      return;\n    }\n\n    this.getFileData();\n  },\n\n  /**\n   * Upload.getFileData()\n   * @description: Gets uploaded file's contents and checks for validity\n   */\n  getFileData: function () {\n    var that = this,\n        files = this.ui.$uploadInput[0].files,\n        reader = new FileReader();\n\n    function load() {\n      return function (event) {\n        var malwares = that.parseFile(event.target.result);\n\n        if (malwares) {\n          that.uploadMalwares(malwares);\n        }\n      }\n    }\n\n    _.each(files, function (file) {\n      reader.onload = load();\n      reader.readAsBinaryString(file);\n    });\n  },\n\n  /**\n   * Upload.parseFile()\n   * @description: Converts the file string in to an Array of malware Objects\n   * @param: {String} file\n   * @returns: {Array}\n   */\n  parseFile: function (file) {\n    var that = this,\n        rows = file.split('\\n'),\n        invalid = false,\n        rowDatas = [],\n        md5s = [];\n\n    function invalidData(message) {\n      that.modal = new Modal({\n        title: 'Error',\n        message: message,\n        buttons: [{ text: 'Ok', callback: function () { that.modal.close(); } }]\n      });\n    }\n\n    if (rows[0] != [\"MD5,ClassificationName,ClassificationType,Size,FileType\"]) {\n      return invalidData('The selected CSV file does not contain column headers.');\n    }\n\n    rows.shift();\n\n    for (var index = 0; index < rows.length; index++) {\n      if (!rows[index]) {\n        continue;\n      }\n\n      rowDatas.push(rows[index].split(','));\n\n      if (rowDatas[index].length !== 5) {\n        return invalidData('The selected CSV file has an invalid number of columns.');\n      }\n\n      if (_.contains(md5s, rowDatas[index][0])) {\n        return invalidData('The selected CSV file contains a duplicate md5.');\n      }\n\n      md5s.push(rowDatas[index][0]);\n    }\n\n    for (var index = 0; index < rowDatas.length; index++) {\n      _.each(rowDatas[index], function (data) {\n        if (data.length > 64) {\n          invalid = true;\n          return invalidData('The selected CSV file contains a value with greater than 64 characters.');\n        }\n      });\n\n      if (invalid) {\n        return;\n      }\n    }\n\n   return  _.map(rowDatas, function (rowData) {\n      return {\n        md5: rowData[0],\n        classificationName: rowData[1],\n        classificationType: rowData[2],\n        fileSize: rowData[3],\n        fileType: rowData[4]\n      };\n    });\n  },\n\n  /**\n   * Upload.uploadMalwares()\n   * @description: Persists malwares to the server and then displays the total amount of unique classification types\n   * @param: {Array} malwares\n   */\n  uploadMalwares: function (malwares) {\n    var that = this;\n\n    function showModal(title, message) {\n      that.modal = new Modal({\n        title: title,\n        message: message,\n        buttons: [{ text: 'Ok', callback: function () { that.modal.close(); } }]\n      });\n    }\n\n    new Request({\n      method: 'post',\n      url: 'malwares',\n      headers: { 'content-type': 'application/json' },\n      body: JSON.stringify(malwares),\n      callback: function (error, response) {\n        if (error) {\n          return showModal('Error', 'The malwares failed to upload.');\n        }\n\n        showModal('Info', 'The malwares uploaded succesfully.\\nYou can now view the amount of each malware type on the Types page.');\n      }\n    });\n  }\n\n});\n\n"]}