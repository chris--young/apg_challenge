/**
 * /controllers/malware.js
 *
 * @decription: Malware controller layer
 * @author: Chris Young (young.c.5690@gmail.com)
 * @created: September 17th 2015
 */

let _ = require('underscore'),
    async = require('async');

let malware = require(`${__dirname}/../services/malware.js`);

/**
 * Malware.create()
 * @description: Validates request body and then persists new malwares to the database
 * @param: {Object} request
 * @param: {Object} response
 */
exports.create = (request, response) => {
  console.log(`* [${request.id}] Request to create malwares:`, request.body);

  let requiredAttributes = ['md5', 'classificationName', 'classificationType', 'fileSize', 'fileType'],
      md5s = [],
      errors = [];

  if (!_.isArray(request.body))
    return response.status(400).send('Request body should be an Array');

  _.each(request.body, (malware) => {
    let missingAttributes = [],
        invalidAttributes = [];

    requiredAttributes.forEach((key) => {
      if (!malware[key])
        missingAttributes.push(key);

      if ((malware[key] + '').length > 64)
        invalidAttributes.push(key);
    });

    if (_.contains(md5s, malware.md5))
      return errors.push(`Duplicate MD5 ${malware.md5}`);

    if (missingAttributes.length)
      errors.push(`malware ${malware.md5} missing: ${missingAttributes.join(',')}`);

    if (invalidAttributes.length)
      errors.push(`malware ${malware.md5} invalid: ${invalidAttributes.join(',')}`);
  });

  if (errors.length) {
    console.log(`* [${request.id}] responded with 400`);
    return response.status(400).send(errors.join('\n'));
  }
  
  async.each(request.body, (data, callback) => {
    malware.create(request.id, data, (error, data) => {
      if (error)
        return callback({ status: error, data: data });

      return callback();
    });
  }, (error) => {
    if (error) {
      response.status(error.status).send(`Upload failed at malware ${error.data}`);
      return console.log(`* [${request.id}] Failed to create malwares at ${error.data}`);
    }

    response.status(200).send();
    console.log(`* [${request.id}] Successfully created malwares`);
  });
};

/**
 * Malware.read()
 * @description: Fetches all malware entries from the database
 * @param: {Object} request
 * @param: {Object} response
 */
exports.read = (request, response) => {
  console.log(`* [${request.id}] Request to fetch all malwares`);

  malware.read(request.id, (error, data) => {
    if (error) {
      response.status(error).send(data);
      return console.log(`* [${request.id}] Failed to respond with malwares`);
    }

    response.status(200).send(data);
    console.log(`* [${request.id}] Successfully respond with malwares`);
  });
};

