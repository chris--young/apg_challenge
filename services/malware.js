/**
 * /services/malware.js
 *
 * @description: Malware service layer
 * @author: Chris Young (young.c.5690@gmail.com)
 * @created: September 17th 2015
 */

let knex = require('knex'),
    uuid = require('node-uuid'),
    _ = require('underscore'),
    async = require('async');

let Type = require('./type.js');

let database = knex({
  client: 'mysql',
  connection: {
    host: '127.0.0.1',
    user: process.env.APG_USER,
    password: process.env.APG_PASS,
    database: 'apg_challenge'
  }
});

/**
 * Malware.create()
 * @description: Creates a new malware entry in the database
 * @param: {String} requestId
 * @param: {Object} malware
 * @param: {Function} callback
 */
exports.create = (requestId, malware, callback) => {
  malware.id = uuid.v4();

  /**
   * createOrUpdateType()
   * @description: Creates a new type or updates it's amount if it already exists
   * @param: {Function} callback
   */
  function createOrUpdateType(callback) {
    Type.read(requestId, malware.classificationType, (error, data) => {
      if (error) {
        return callback(error, 'Failed to read Type');
      } 
      if (data.length) {
        Type.update(requestId, data[0].id, data[0].amount + 1, (error, data) => {
          if (error) {
            return callback(error, 'Failed to update Type');
          }
          return callback();
        });
      } else {
        Type.create(requestId, { classificationType: malware.classificationType, amount: 1 }, (error, data) => {
          if (error) {
            return callback(error, 'Failed to create new Type');
          }
          return callback();
        });
      }
    })
  }

  /**
   * createMalware()
   * @description: Persists a malware to the database if it's hash does not already exists
   * @param: {Function} callback
   */
  function createMalware(callback) {
    database.select().table('malware').where({ md5: malware.md5 }).then((data) => {
      if (data.length) {
        console.log(`* [${requestId}] Ignoring duplicate malware ${data[0].id}`);
        return callback(null, data);
      } else {
        database.table('malware').insert(malware).then((data) => {
          return callback(null, data);
        }).catch((error) => {
          console.log(`* [${requestId}] Failed to persist malware to the database`, error);
          return callback(500, malware.md5);
        });
      }
    }).catch((error) => {
      return callback(500, malware.md5);
    });
  }
  
  async.series([createOrUpdateType, createMalware], (error, results) => {
    if (error) {
      console.log(`* [${requestId}] Failed to persist malware to the database`, error);
      return callback(500, malware.md5);
    }

    return callback(null, results);
  });
};

/**
 * Malware.readAll()
 * @description: Fetches all malware entries from the database
 * @param: {String} requestId
 * @param: {Function} callback
 */
exports.readAll = (requestId, callback) => {
  database.select().table('malware').then((data) => {
    return callback(null, data);
  }).catch((error) => {
    console.log(`* [${requestId}] Failed to read malwares from the database`, error);
    return callback(500);
  });
};

/**
 * Malware.validate()
 * @description: Checks if an Array of malwares is valid
 * @param: {Array} malwares
 * @returns: {String}
 */
exports.validate = (malwares) => {
  let requiredAttributes = ['md5', 'classificationName', 'classificationType', 'fileSize', 'fileType'],
      md5s = [],
      errors = [];

  _.each(malwares, (malware) => {
    let missingAttributes = [],
        invalidAttributes = [];

    requiredAttributes.forEach((key) => {
      if (!malware[key]) {
        missingAttributes.push(key);
      }

      if ((malware[key] + '').length > 64) {
        invalidAttributes.push(key);
      }
    });

    if (_.contains(md5s, malware.md5)) {
      return errors.push(`Duplicate MD5 ${malware.md5}`);
    }

    if (missingAttributes.length) {
      errors.push(`malware ${malware.md5} missing: ${missingAttributes.join(',')}`);
    }

    if (invalidAttributes.length) {
      errors.push(`malware ${malware.md5} invalid: ${invalidAttributes.join(',')}`);
    }
  });

  if (errors.length) {
    console.log(`* [${request.id}] responded with 400`);
    return errors.join('\n');
  }
};

