/**
 * /services/malware.js
 *
 * @description: Malware service layer
 * @author: Chris Young (young.c.5690@gmail.com)
 * @created: September 17th 2015
 */

let knex = require('knex'),
    uuid = require('node-uuid'),
    _ = require('underscore');

let database = knex({
  client: 'mysql',
  connection: {
    host: '127.0.0.1',
    user: process.env.APG_USER,
    password: process.env.APG_PASS,
    database: 'apg_challenge'
  }
});

/**
 * Malware.create()
 * @description: Creates a new malware entry in the database
 * @param: {String} requestId
 * @param: {Object} malware
 * @param: {Function} callback
 */
exports.create = (requestId, malware, callback) => {
  malware.id = uuid.v4();

  database.select().table('malware').where({ md5: malware.md5 }).then((data) => {
    if (data) {
      return callback(null, data);
    }

    database.table('malware').insert(malware).then((data) => {
      return callback(null, data);
    }).catch((error) => {
      console.log(`* [${requestId}] Failed to persist malware to the database`);
      return callback(500, malware.md5);
    });
  });
};

/**
 * Malware.read()
 * @description: Fetches all malware entries from the database
 * @param: {String} requestId
 * @param: {Function} callback
 */
exports.read = (requestId, callback) => {
  database.select().table('malware').then((data) => {
    return callback(null, data);
  }).catch((error) => {
    console.log(`* [${requestId}] Failed to read malwares from the database`);
    return callback(500);
  });
};

/**
 * Malware.validate()
 * @description: Checks if an Array of malwares is valid
 * @param: {Array} malwares
 * @returns: {String}
 */
exports.validate = (malwares) => {
  let requiredAttributes = ['md5', 'classificationName', 'classificationType', 'fileSize', 'fileType'],
      md5s = [],
      errors = [];

  _.each(malwares, (malware) => {
    let missingAttributes = [],
        invalidAttributes = [];

    requiredAttributes.forEach((key) => {
      if (!malware[key]) {
        missingAttributes.push(key);
      }

      if ((malware[key] + '').length > 64) {
        invalidAttributes.push(key);
      }
    });

    if (_.contains(md5s, malware.md5)) {
      return errors.push(`Duplicate MD5 ${malware.md5}`);
    }

    if (missingAttributes.length) {
      errors.push(`malware ${malware.md5} missing: ${missingAttributes.join(',')}`);
    }

    if (invalidAttributes.length) {
      errors.push(`malware ${malware.md5} invalid: ${invalidAttributes.join(',')}`);
    }
  });

  if (errors.length) {
    console.log(`* [${request.id}] responded with 400`);
    return errors.join('\n');
  }
};

